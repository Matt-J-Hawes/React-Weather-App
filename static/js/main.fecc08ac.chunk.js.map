{"version":3,"sources":["components/Header.js","images/clouds.png","images/sun.png","images/drizzle.png","images/snow.png","components/Temperature.js","components/Toggle.js","apiKey/config.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","Temperature","props","tempCelcius","tempFahrenheit","desc","wind","city","initialValue","React","useState","value","setValue","toggle","useCallback","v","useToggle","isOn","toggleIsOn","onClick","includes","src","clouds","alt","drizzle","snow","sun","apiKey","App","state","weather","this","getWeather","name","axios","get","then","res","setState","Number","parseFloat","data","main","temp","toFixed","speed","catch","error","console","log","e","preventDefault","newPlace","onSubmit","getNewDestination","ref","input","type","placeholder","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fecc08ac.chunk.js","sourcesContent":["//DEPENDENCIES\nimport React from 'react';\n\nconst Header = () => {\n\treturn (\n\t\t<div className =\"container\">\n\t\t   <h1>Weather App</h1>\n\t\t</div>\n\t);\n};\n\nexport default Header;","export default __webpack_public_path__ + \"static/media/clouds.2ddbb531.png\";","export default __webpack_public_path__ + \"static/media/sun.f0545f5a.png\";","export default __webpack_public_path__ + \"static/media/drizzle.388a6a1a.png\";","export default __webpack_public_path__ + \"static/media/snow.6cbdeaf1.png\";","//DEPENDENCIES\nimport React from 'react';\n\n//COMPONENTS\nimport useToggle from './Toggle'\n\n//WEATHER IMAGES\nimport clouds from '../images/clouds.png';\nimport sun from '../images/sun.png';\nimport drizzle from '../images/drizzle.png';\nimport snow from '../images/snow.png'\n\nconst Temperature = (props) => {\n    const tempCelcius = props.tempCelcius\n    const tempFahrenheit = props.tempFahrenheit\n    const desc = props.desc\n    const wind = props.wind\n    const city = props.city\n    //Call useToggle function to switch between °C & °F\n    const [isOn, toggleIsOn] = useToggle();\n\n\treturn(\n       <div className = \"weather_container\">\n       <h3>{city}</h3>\n       <p className = \"description\">({desc})</p>\n         <div onClick = {toggleIsOn} >\n       \t     {isOn ? \n       \t     \t<h2>{tempCelcius}°C<span className = 'degrees'>|°F</span></h2> : \n       \t     \t<h2>{tempFahrenheit}°F <span className = 'degrees'>|°C</span></h2>}\n       \t </div>\n       \t <div className = \"weather_images\">\n\t       \t {desc.includes('Clouds')  ? \n\t       \t <img className = \"clouds\" src={clouds} alt=\"clouds\"/> \n\t       \t : null }\n\t       \t {desc.includes('Drizzle') || desc.includes('Rain') ? \n             <img className = \"clouds\" src={drizzle} alt=\"drizzle\"/>\n\t       \t : null }\n\t       \t {desc.includes('Snow') ? \n             <img className = \"clouds\" src={snow} alt=\"drizzle\"/>\n\t       \t : null }\n\t       \t {tempCelcius >= 20 ? \n\t       \t <img src={sun} alt=\"sun\" />\n\t       \t :null }\n       \t </div>\n       \t   <hr/>\n       \t   <p>The current wind speed in <span> {city} </span> is <span>{wind} mph </span></p>\n       </div>\n\t);\n};\n\nexport default Temperature;","//DEPENDENCIES\nimport React from 'react';\n\nexport default function useToggle(initialValue = true) {\n\t  const [value, setValue] = React.useState(initialValue);\n\t  const toggle = React.useCallback(() => {\n\t    setValue(v => !v);\n\t  }, []);\n\n  return [value, toggle];\n}","const apiKey = 'bccf47493d7dac93fd10a706918373a6'\nexport default apiKey","//DEPENDENCIES\nimport React, {Component} from 'react';\nimport axios from 'axios';\nimport './App.css';\n\n//NECESSARY COMPONENTS\nimport Header from './components/Header';\nimport Temperature from './components/Temperature';\nimport apiKey from './apiKey/config';\n\nclass App extends Component {\n\n    state = {\n    \ttempCelcius: [],\n    \ttempFahrenheit: [],\n    \twind: [],\n    \tweather: [],\n    \tcity: '',\n    }\n\n    componentDidMount(){\n    \tthis.getWeather()\n    }\n    \n    //Use 'axios' to retrieve data from weather api \n    getWeather(name = 'london'){\n\t    axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${name}&appid=${apiKey}`)\n\t      .then(res => \n              this.setState({\n              \t  tempCelcius: Number.parseFloat(res.data.main.temp - 273.15).toFixed(1),\n              \t  tempFahrenheit: Number.parseFloat((res.data.main.temp - 273.15) * 9/5 + 32).toFixed(1),\n              \t  wind: res.data.wind.speed,\n              \t  weather: res.data.weather[0].main,\n              \t  city: res.data.name\n            })\n\t    )\n\t      .catch(error => console.log(error, 'Problem fetching data from Api'))\n\t};\n\n    /* Dynamic Search feature - take user input &\n    callback 'getWeather' function to generate new results */\n\tgetNewDestination(e){\n\t\te.preventDefault()\n\t\tconst newPlace = this.newPlace.value\n\t\t\tif(newPlace !== ''){\n\t\t\t\tthis.getWeather(newPlace)\n\t\t\t};\n\t\tthis.newPlace.value = ''\n\t};\n\n\trender(){\n\t  return (\n\t    <div className=\"App\">\n\t      <Header />\n\t      <form onSubmit= {e => this.getNewDestination(e)}>\n\t      \t<input ref = {input => this.newPlace = input} type=\"text\" placeholder=\"Amsterdam...\"></input>\n\t      \t<button onClick= {e => this.getNewDestination(e)}>&#x1F50D;</button>\n\t      </form>\n\t      <Temperature \n\t         tempCelcius = {this.state.tempCelcius}\n\t         tempFahrenheit = {this.state.tempFahrenheit}\n\t         desc = {this.state.weather}\n\t         wind = {this.state.wind}\n\t         city = {this.state.city}\n\t      />\n\t    </div>\n\t  );\n\t}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}